import { APIContext } from 'astro';
import { z } from 'zod';
import { supabaseClient, DEFAULT_USER_ID } from '../../../db/supabase.client';
import { flashcardService } from '../../../lib/services/flashcard-service';
import { loggerService } from '../../../lib/services/logger-service';
import type { ApproveFlashcardsCommand, ApproveFlashcardsResponse } from '../../../types';

// Validation schema for the flashcard candidate
const flashcardCandidateSchema = z.object({
  front_content: z.string().max(200, "Front content cannot exceed 200 characters"),
  back_content: z.string().max(200, "Back content cannot exceed 200 characters"),
  ai_metadata: z.object({
    model: z.string(),
    generation_time: z.string(),
    parameters: z.record(z.unknown()),
    // Allow optional fields that track modifications
    wasEdited: z.boolean().optional(),
    modified: z.boolean().optional(),
    edited_at: z.string().optional(),
    original_content: z.object({
      front_content: z.string().optional(),
      back_content: z.string().optional()
    }).optional()
  }),
  // Allow wasEdited directly on the flashcard object (will be filtered out before DB insert)
  wasEdited: z.boolean().optional()
}).passthrough(); // Allow additional properties to pass through

// Validation schema for the approve flashcards command
const approveFlashcardsSchema = z.object({
  flashcards: z.array(flashcardCandidateSchema)
    .min(1, "At least one flashcard must be provided")
});

/**
 * API endpoint for approving and saving flashcards generated by AI
 * 
 * @endpoint POST /api/flashcards
 * @param flashcards - Array of flashcard candidates to approve and save
 * @returns Object containing approved flashcards and count
 */
export const POST = async ({ request }: APIContext) => {
        // Use default user ID instead of authentication for now
        const userId = DEFAULT_USER_ID;
  try {

    // Parse and validate the request body
    const requestBody = await request.json();
    const validationResult = approveFlashcardsSchema.safeParse(requestBody);
    
    if (!validationResult.success) {
      await loggerService.logError(userId, 'VALIDATION_FAILED', 'Invalid flashcard data format');
      
      return new Response(
        JSON.stringify({ 
          error: 'Invalid request body', 
          details: validationResult.error.format() 
        }), 
        { status: 400 }
      );
    }

    const command = validationResult.data as ApproveFlashcardsCommand;
    
    // Save approved flashcards
    const result = await flashcardService.approveFlashcards(command, userId);
    
    // Return successful response
    return new Response(
      JSON.stringify(result), 
      { 
        status: 201,
        headers: {
          'Content-Type': 'application/json'
        }
      }
    );
  } catch (error) {
    console.error('Error approving flashcards:', error);
    const errorMessage = error instanceof Error ? error.message : String(error);
    await loggerService.logError(
      userId,
      'FLASHCARD_APPROVAL_ERROR',
      `Failed to approve flashcards: ${errorMessage}`
    );
    
    return new Response(
      JSON.stringify({ error: 'Internal server error' }), 
      { status: 500 }
    );
  }
}; 